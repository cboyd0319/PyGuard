name: Release

on:
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write
  packages: write
  id-token: write  # Required for OIDC attestations

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false  # Don't cancel release builds

defaults:
  run:
    shell: bash

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      contents: write
      packages: write
      id-token: write
      attestations: write  # Required for build provenance

    steps:
    - name: Checkout code
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      with:
        fetch-depth: 1

    - name: Extract version from tag
      id: get_version
      shell: bash
      run: |
        set -euo pipefail
        VERSION="${GITHUB_REF#refs/tags/v}"
        echo "VERSION=${VERSION}" >> "${GITHUB_OUTPUT}"
        echo "Releasing version: ${VERSION}"

    - name: Set up Python
      uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c # v6.0.0
      with:
        python-version: '3.13'
        cache: 'pip'

    - name: Install dependencies
      shell: bash
      run: |
        set -euo pipefail
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      shell: bash
      run: |
        set -euo pipefail
        python -m build

    - name: Check package
      shell: bash
      run: |
        set -euo pipefail
        twine check dist/*

    - name: Generate SBOM (SPDX)
      uses: anchore/sbom-action@aa0e114b2e19480f157109b9922bda359bd98b90 # v0.20.8
      with:
        artifact-name: pyguard-${{ steps.get_version.outputs.VERSION }}.spdx.json
        output-file: pyguard-${{ steps.get_version.outputs.VERSION }}.spdx.json
        format: spdx-json

    - name: Generate SBOM (CycloneDX)
      shell: bash
      run: |
        set -euo pipefail
        pip install cyclonedx-bom
        cyclonedx-py --format json --output pyguard-${{ steps.get_version.outputs.VERSION }}.cyclonedx.json || true

    - name: Attest Build Provenance
      uses: actions/attest-build-provenance@977bb373ede98d70efdf65b84cb5f73e068dcc2a # v3.0.0
      with:
        subject-path: dist/*

    - name: Create Checksums
      shell: bash
      run: |
        set -euo pipefail
        cd dist
        sha256sum ./* > checksums.sha256
        cd ..

    - name: Publish to Test PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.TEST_PYPI_TOKEN }}
      shell: bash
      run: |
        set -euo pipefail
        twine upload --repository testpypi dist/* --skip-existing || true

    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
      shell: bash
      run: |
        set -euo pipefail
        twine upload dist/*

    - name: Extract changelog
      id: changelog
      shell: bash
      run: |
        set -euo pipefail
        VERSION="${{ steps.get_version.outputs.VERSION }}"
        # Extract the relevant section from docs/CHANGELOG.md
        awk "/## \[$VERSION\]/,/## \[/" docs/CHANGELOG.md | head -n -1 > release_notes.md || echo "See docs/CHANGELOG.md for details" > release_notes.md

    - name: Create GitHub Release
      uses: softprops/action-gh-release@6da8fa9354ddfdc4aeace5fc48d7f679b5214090 # v2.4.1
      with:
        files: |
          dist/*
          dist/checksums.sha256
          pyguard-${{ steps.get_version.outputs.VERSION }}.spdx.json
          pyguard-${{ steps.get_version.outputs.VERSION }}.cyclonedx.json
        body_path: release_notes.md
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Update major version tag
      shell: bash
      run: |
        set -euo pipefail
        VERSION="${{ steps.get_version.outputs.VERSION }}"
        MAJOR_VERSION=$(echo "$VERSION" | cut -d. -f1)
        
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        
        # Delete old major version tag if it exists
        git push origin ":refs/tags/v${MAJOR_VERSION}" || true

        # Create and push new major version tag
        git tag -fa "v${MAJOR_VERSION}" -m "Update v${MAJOR_VERSION} to ${VERSION}"
        git push origin "v${MAJOR_VERSION}"
        
        echo "[OK] Updated v${MAJOR_VERSION} tag to point to v${VERSION}"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Add release summary
      if: success()
      shell: bash
      run: |
        {
          echo "## ðŸŽ‰ Release ${{ steps.get_version.outputs.VERSION }} Published"
          echo ""
          echo "### Package Information"
          echo "- **Version:** ${{ steps.get_version.outputs.VERSION }}"
          echo "- **PyPI:** https://pypi.org/project/pyguard/${{ steps.get_version.outputs.VERSION }}/"
          echo "- **GitHub Release:** ${{ github.server_url }}/${{ github.repository }}/releases/tag/${GITHUB_REF#refs/tags/}"
          echo ""
          echo "### Artifacts"
          echo "- [OK] Source distribution (sdist)"
          echo "- [OK] Wheel package (bdist_wheel)"
          echo "- [OK] SBOM - SPDX 2.3 format"
          echo "- [OK] SBOM - CycloneDX format"
          echo "- [OK] Build provenance attestation (SLSA)"
          echo "- [OK] SHA256 checksums"
          echo ""
          echo "### Security"
          echo "- Build provenance verifiable via GitHub attestations"
          echo "- All dependencies audited by pip-audit, OSV-Scanner, Safety"
          echo "- Code scanned by Bandit, Semgrep, CodeQL"
        } >> "${GITHUB_STEP_SUMMARY}"
