name: Docs CI

on:
  pull_request:
  push:
    branches: [ main ]

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  markdownlint:
    name: Markdown Lint
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          persist-credentials: false

      - name: Setup Node.js
        uses: actions/setup-node@2028fbc5c25fe9cf00d9f06a71cc4710d4507903 # v6.0.0
        with:
          node-version: '20'

      - name: Install markdownlint-cli
        shell: bash
        run: npm i -g markdownlint-cli

      - name: Run markdownlint
        shell: bash
        run: |
          set -euo pipefail
          markdownlint "**/*.md" --ignore "node_modules" --config .markdownlint.json

  vale:
    name: Prose Lint (Vale)
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          persist-credentials: false

      - name: Run Vale
        uses: errata-ai/vale-action@d89dee975228ae261d22c15adcd03578634d429c # v2.1.1
        with:
          config: .vale.ini
          files: |
            **/*.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  link-check:
    name: Link Validation
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          persist-credentials: false

      - name: Link Checker
        uses: lycheeverse/lychee-action@885c65f3dc543b57c898c8099f4e08c8afd178a2 # v2.6.1
        with:
          args: >-
            --no-progress --exclude-file .lycheeignore --accept 200,206,403,429
            --retry-wait-time 2 --max-concurrency 10 --timeout 20s
            **/*.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Add docs summary
        if: always()
        shell: bash
        run: |
          {
            echo "## üìö Documentation CI Complete"
            echo ""
            echo "Checks performed:"
            echo "- ‚úì Markdown linting (markdownlint)"
            echo "- ‚úì Prose quality (Vale)"
            echo "- ‚úì Link validation (lychee)"
            echo "- ‚úì Python script validation"
          } >> "${GITHUB_STEP_SUMMARY}"

  validate-python-scripts:
    name: Validate Python Scripts in Documentation
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          persist-credentials: false

      - name: Set up Python
        uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c # v6.0.0
        with:
          python-version: '3.13'

      - name: Validate Python script syntax
        shell: bash
        run: |
          set -euo pipefail
          
          echo "üîç Validating Python scripts referenced in documentation..."
          
          SCRIPTS_FOUND=0
          SCRIPTS_VALID=0
          SCRIPTS_INVALID=0
          
          # Check scripts directory
          for script in scripts/**/*.py examples/**/*.py; do
            if [ -f "$script" ]; then
              ((SCRIPTS_FOUND++))
              echo "Checking: $script"
              if python -m py_compile "$script" 2>/dev/null; then
                ((SCRIPTS_VALID++))
                echo "  ‚úì Valid syntax"
              else
                ((SCRIPTS_INVALID++))
                echo "  ‚úó Invalid syntax"
                python -m py_compile "$script" || true
              fi
            fi
          done || true
          
          echo ""
          echo "üìä Validation Summary:"
          echo "  Total scripts: $SCRIPTS_FOUND"
          echo "  Valid: $SCRIPTS_VALID"
          echo "  Invalid: $SCRIPTS_INVALID"
          
          if [ "$SCRIPTS_INVALID" -gt 0 ]; then
            echo "‚ùå Some scripts have syntax errors"
            exit 1
          fi
          
          echo "‚úì All Python scripts have valid syntax"

      - name: Validate PyGuard module syntax
        shell: bash
        run: |
          set -euo pipefail
          
          echo "üîç Validating PyGuard module files..."
          
          # Compile all Python files in pyguard directory
          python -m compileall -q pyguard/ || {
            echo "‚ùå PyGuard module has syntax errors"
            exit 1
          }
          
          echo "‚úì All PyGuard module files have valid syntax"

      - name: Check for common issues in example code
        shell: bash
        run: |
          set -euo pipefail
          
          echo "üîç Checking for common issues in example code..."
          
          # Check for hardcoded paths
          if grep -r "/home/user" examples/ 2>/dev/null; then
            echo "‚ö†Ô∏è  Warning: Hardcoded paths found in examples"
          fi
          
          # Check for TODO/FIXME in examples
          if grep -r "TODO\|FIXME" examples/ 2>/dev/null; then
            echo "‚ö†Ô∏è  Warning: Unfinished examples found (TODO/FIXME)"
          fi
          
          echo "‚úì Example code quality checks complete"

