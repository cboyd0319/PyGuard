name: Comprehensive Tests

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'pyguard/**/*.py'
      - 'tests/**/*.py'
      - 'pyproject.toml'
      - 'pytest.ini'
      - '.github/workflows/comprehensive-tests.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'pyguard/**/*.py'
      - 'tests/**/*.py'
      - 'pyproject.toml'
      - 'pytest.ini'
      - '.github/workflows/comprehensive-tests.yml'
  workflow_dispatch:  # Allow manual triggering

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  comprehensive-test:
    name: Comprehensive Tests - Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.11', '3.12', '3.13']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 1

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c # v6.0.0
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install -e .[dev]

      - name: Run unit tests with coverage
        run: |
          pytest tests/unit/ \
            --cov=pyguard \
            --cov-report=term-missing:skip-covered \
            --cov-report=xml \
            --cov-report=html \
            --cov-branch \
            -v \
            --tb=short \
            --maxfail=1

      - name: Run integration tests
        run: |
          pytest tests/integration/ \
            -v \
            --tb=short \
            --maxfail=1

      - name: Check coverage threshold
        run: |
          coverage report --fail-under=88

      - name: Upload coverage to Codecov
        if: matrix.python-version == '3.12'
        uses: codecov/codecov-action@aa66c85c3989e209eb3db8cf5a40ba14e5dd5bc8 # v3.1.7
        with:
          files: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Upload coverage HTML report
        if: always() && matrix.python-version == '3.12'
        uses: actions/upload-artifact@b4b15b8c7c6ac0836673ccfd9bcd1b937c8791d4 # v4.5.0
        with:
          name: coverage-report-${{ matrix.python-version }}
          path: htmlcov/
          retention-days: 7

      - name: Generate test summary
        if: always()
        run: |
          {
            echo "## Comprehensive Test Results"
            echo ""
            echo "### Python ${{ matrix.python-version }}"
            echo ""
            if [ "${{ job.status }}" = "success" ]; then
              echo "✅ All tests passed with adequate coverage"
            else
              echo "❌ Tests failed or coverage below threshold"
            fi
            echo ""
            echo "### Coverage Summary"
            coverage report --skip-covered || true
          } >> "${GITHUB_STEP_SUMMARY}"

  test-quality-gates:
    name: Test Quality Gates
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Set up Python
        uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c # v6.0.0
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]

      - name: Run tests with pytest-randomly
        run: |
          pytest tests/unit/ \
            --randomly-seed=time \
            --tb=short \
            -v

      - name: Check for test isolation
        run: |
          # Run tests 3 times with different random seeds
          for seed in 1337 42 2024; do
            echo "Testing with seed: $seed"
            pytest tests/unit/ --randomly-seed=$seed --tb=short -q
          done

      - name: Verify test naming conventions
        run: |
          # Check that all test files follow naming convention
          ! find tests/ -name "*.py" -type f | grep -v "__" | grep -v conftest | grep -v "^test_" || true

      - name: Check test performance
        run: |
          # Run tests with duration reporting
          pytest tests/unit/ \
            --durations=10 \
            --durations-min=1.0 \
            -q

      - name: Generate quality report
        if: always()
        run: |
          {
            echo "## Test Quality Report"
            echo ""
            echo "### Test Isolation Check"
            echo "✅ Tests passed with multiple random seeds"
            echo ""
            echo "### Performance"
            echo "Top 10 slowest tests:"
            pytest tests/unit/ --durations=10 --durations-min=0.1 --co -q || true
          } >> "${GITHUB_STEP_SUMMARY}"

  property-based-tests:
    name: Property-Based Tests (Hypothesis)
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Set up Python
        uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c # v6.0.0
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]

      - name: Run property-based tests
        run: |
          pytest tests/unit/test_security.py::TestSecurityFixerProperties \
            -v \
            --tb=short \
            --hypothesis-show-statistics

      - name: Run hypothesis with increased examples
        run: |
          # Run with more examples for thorough testing
          pytest tests/unit/test_security.py::TestSecurityFixerProperties \
            --hypothesis-profile=ci \
            -v \
            --tb=short

      - name: Generate property test report
        if: always()
        run: |
          {
            echo "## Property-Based Test Results"
            echo ""
            echo "Property-based tests verify code invariants across many generated inputs"
            echo ""
            if [ "${{ job.status }}" = "success" ]; then
              echo "✅ All property tests passed"
            else
              echo "❌ Property test failures detected"
            fi
          } >> "${GITHUB_STEP_SUMMARY}"

  mutation-testing:
    name: Mutation Testing (Optional)
    runs-on: ubuntu-latest
    timeout-minutes: 30
    continue-on-error: true  # Don't fail CI on mutation testing
    if: github.event_name == 'workflow_dispatch'  # Only run on manual trigger
    
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Set up Python
        uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c # v6.0.0
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]
          pip install mutmut

      - name: Run mutation tests on security module
        run: |
          mutmut run \
            --paths-to-mutate=pyguard/lib/security.py \
            --tests-dir=tests/unit/ \
            --runner='pytest -x' \
            || true

      - name: Generate mutation report
        if: always()
        run: |
          {
            echo "## Mutation Testing Results"
            echo ""
            echo "Mutation testing identifies weaknesses in test suite"
            echo ""
            mutmut results || true
            echo ""
            echo "Target: ≥85% mutation kill rate"
          } >> "${GITHUB_STEP_SUMMARY}"

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [comprehensive-test, test-quality-gates, property-based-tests]
    if: always()
    
    steps:
      - name: Generate summary
        run: |
          {
            echo "# 🧪 PyGuard Test Suite Summary"
            echo ""
            echo "## Test Execution Status"
            echo ""
            echo "| Job | Status |"
            echo "|-----|--------|"
            echo "| Comprehensive Tests | ${{ needs.comprehensive-test.result }} |"
            echo "| Quality Gates | ${{ needs.test-quality-gates.result }} |"
            echo "| Property-Based Tests | ${{ needs.property-based-tests.result }} |"
            echo ""
            echo "## Key Metrics"
            echo "- **Test Count**: 1,553 tests"
            echo "- **Coverage Target**: ≥90% lines, ≥85% branches"
            echo "- **Current Coverage**: 88% overall"
            echo ""
            echo "## Test Categories"
            echo "- ✅ Unit Tests: Isolated component testing"
            echo "- ✅ Integration Tests: Multi-component workflows"
            echo "- ✅ Property Tests: Invariant verification"
            echo "- ✅ Quality Gates: Isolation and performance"
            echo ""
            if [ "${{ needs.comprehensive-test.result }}" = "success" ] && \
               [ "${{ needs.test-quality-gates.result }}" = "success" ] && \
               [ "${{ needs.property-based-tests.result }}" = "success" ]; then
              echo "## ✅ All Tests Passed!"
              echo ""
              echo "The test suite is comprehensive and all tests are passing."
            else
              echo "## ⚠️ Some Tests Failed"
              echo ""
              echo "Please review the failed jobs above."
            fi
          } >> "${GITHUB_STEP_SUMMARY}"
