name: Security Scanning

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'pyguard/**/*.py'
      - 'tests/**/*.py'
      - 'pyproject.toml'
      - 'setup.py'
      - 'requirements*.txt'
      - '.github/workflows/security-scan.yml'
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run weekly security scans
    - cron: '0 2 * * 1'  # Monday at 2 AM UTC
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash

jobs:
  bandit-sast:
    name: Bandit SAST Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: read
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 1
          persist-credentials: false

      - name: Set up Python
        uses: actions/setup-python@0b93645e9fea7318ecaed2b359559ac225c90a2b # v5.3.0
        with:
          python-version: '3.13'
          cache: 'pip'

      - name: Install Bandit
        run: |
          python -m pip install --upgrade pip
          pip install 'bandit[toml]>=1.8.0'

      - name: Run Bandit Security Scanner
        run: |
          bandit -r pyguard/ -f sarif -o bandit-results.sarif --exit-zero
          bandit -r pyguard/ -f json -o bandit-results.json --exit-zero

      - name: Upload Bandit SARIF to Security tab
        uses: github/codeql-action/upload-sarif@f443b600d91635bebf5b0d9ebc620189c0d6fba5 # v4.30.8
        if: always()
        with:
          sarif_file: bandit-results.sarif
          category: bandit

      - name: Upload Bandit results as artifact
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        if: always()
        with:
          name: bandit-results
          path: |
            bandit-results.sarif
            bandit-results.json
          retention-days: 30

  semgrep-sast:
    name: Semgrep SAST Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 20
    permissions:
      contents: read
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 1
          persist-credentials: false

      - name: Run Semgrep
        uses: returntocorp/semgrep-action@cb0fe85e91d0f820b42ac6d1a20fca8efb19e00c # v1
        with:
          config: >-
            p/security-audit
            p/python
            p/ci
            p/owasp-top-ten
          generateSarif: true

      - name: Upload Semgrep SARIF
        uses: github/codeql-action/upload-sarif@f443b600d91635bebf5b0d9ebc620189c0d6fba5 # v4.30.8
        if: always()
        with:
          sarif_file: semgrep.sarif
          category: semgrep

  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: read
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 1
          persist-credentials: false

      - name: Set up Python
        uses: actions/setup-python@0b93645e9fea7318ecaed2b359559ac225c90a2b # v5.3.0
        with:
          python-version: '3.13'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .

      - name: Install security scanners
        run: |
          pip install pip-audit safety osv-scanner

      - name: Run pip-audit
        run: |
          pip-audit --format json --output pip-audit-results.json || true
          pip-audit --format markdown --output pip-audit-results.md || true

      - name: Run OSV-Scanner
        run: |
          osv-scanner --format json --output osv-results.json . || true

      - name: Run Safety
        run: |
          safety check --json --output safety-results.json || true

      - name: Upload vulnerability scan results
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        if: always()
        with:
          name: dependency-scan-results
          path: |
            pip-audit-results.json
            pip-audit-results.md
            osv-results.json
            safety-results.json
          retention-days: 30

      - name: Create summary
        if: always()
        run: |
          {
            echo "## 🔍 Dependency Vulnerability Scan Results"
            echo ""
            echo "### Scanners Used"
            echo "- pip-audit (PyPI Advisory Database)"
            echo "- OSV-Scanner (Google's OSV Database)"
            echo "- Safety (Safety DB)"
            echo ""
            if [ -f pip-audit-results.md ]; then
              echo "### pip-audit Results"
              cat pip-audit-results.md || echo "No vulnerabilities found"
            fi
          } >> "${GITHUB_STEP_SUMMARY}"

  secrets-scan:
    name: Secrets Detection
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: read
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0  # Need full history for secret scanning
          persist-credentials: false

      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@93c064d7cfed66f3b4e1ca2c4b69f929b90bd10a # v2.3.8
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_ENABLE_SUMMARY: true

      - name: Create secrets scan summary
        if: always()
        run: |
          {
            echo "## 🔐 Secrets Scan Complete"
            echo ""
            echo "Scanned for:"
            echo "- API keys and tokens"
            echo "- Passwords and credentials"
            echo "- Private keys and certificates"
            echo "- Cloud provider credentials"
            echo ""
            if [ "${{ job.status }}" = "success" ]; then
              echo "✅ No secrets detected"
            else
              echo "⚠️ Potential secrets found - review Security tab"
            fi
          } >> "${GITHUB_STEP_SUMMARY}"

  security-summary:
    name: Security Scan Summary
    runs-on: ubuntu-latest
    needs: [bandit-sast, semgrep-sast, dependency-scan, secrets-scan]
    if: always()
    permissions:
      contents: read

    steps:
      - name: Create overall summary
        run: |
          {
            echo "## 🛡️ Security Scanning Complete"
            echo ""
            echo "### Scan Results"
            echo "- **Bandit SAST:** ${{ needs.bandit-sast.result }}"
            echo "- **Semgrep SAST:** ${{ needs.semgrep-sast.result }}"
            echo "- **Dependency Scan:** ${{ needs.dependency-scan.result }}"
            echo "- **Secrets Scan:** ${{ needs.secrets-scan.result }}"
            echo ""
            echo "### Next Steps"
            echo "1. Review findings in the Security tab"
            echo "2. Check uploaded artifacts for detailed reports"
            echo "3. Address any high-severity issues"
            echo ""
            echo "_All security findings are uploaded as SARIF to the Security tab_"
          } >> "${GITHUB_STEP_SUMMARY}"
