---
# Test PyGuard GitHub Action
#
# This workflow tests the PyGuard action itself to ensure it works correctly
# for users who will consume it from the GitHub Marketplace.

name: Test Action

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'action.yml'
      - 'pyguard/**'
      - '.github/workflows/test-action.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'action.yml'
      - 'pyguard/**'
      - '.github/workflows/test-action.yml'
  workflow_dispatch:

permissions:
  contents: read
  security-events: write

jobs:
  test-action-basic:
    name: Test Basic Scan
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.11', '3.12', '3.13']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Test action with defaults
      uses: ./
      with:
        paths: 'pyguard/'
        scan-only: 'true'
        upload-sarif: 'false'
    
    - name: Verify SARIF was created
      shell: bash
      run: |
        if [ ! -f "pyguard-report.sarif" ]; then
          echo "::error::SARIF report not created"
          exit 1
        fi
        echo "✅ SARIF report created successfully"

  test-action-security-only:
    name: Test Security-Only Mode
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Test security-only mode
      uses: ./
      with:
        paths: 'pyguard/'
        scan-only: 'true'
        security-only: 'true'
        upload-sarif: 'false'
    
    - name: Check output
      run: |
        echo "Issues found: ${{ steps.scan.outputs.issues-found }}"

  test-action-custom-paths:
    name: Test Multiple Paths
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Test with multiple paths
      uses: ./
      with:
        paths: 'pyguard/ examples/'
        scan-only: 'true'
        severity: 'HIGH'
        upload-sarif: 'false'

  test-action-exclusions:
    name: Test Exclusion Patterns
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Test with exclusions
      uses: ./
      with:
        paths: '.'
        scan-only: 'true'
        exclude: 'tests/* benchmarks/* .github/*'
        upload-sarif: 'false'

  test-action-sarif-upload:
    name: Test SARIF Upload
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Test with SARIF upload
      uses: ./
      with:
        paths: 'pyguard/'
        scan-only: 'true'
        upload-sarif: 'true'
        sarif-file: 'test-pyguard.sarif'
    
    - name: Verify SARIF exists
      run: |
        if [ ! -f "test-pyguard.sarif" ]; then
          echo "::error::Custom SARIF file not created"
          exit 1
        fi

  test-action-fail-on-issues:
    name: Test Fail on Issues
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    # This should pass because we're using HIGH severity on our own codebase
    - name: Test fail-on-issues (should pass)
      uses: ./
      with:
        paths: 'pyguard/'
        scan-only: 'true'
        severity: 'CRITICAL'
        fail-on-issues: 'true'
        upload-sarif: 'false'

  test-action-outputs:
    name: Test Action Outputs
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run scan with outputs
      id: pyguard-scan
      uses: ./
      with:
        paths: 'pyguard/'
        scan-only: 'true'
        upload-sarif: 'false'
    
    - name: Validate outputs
      run: |
        echo "Issues found: ${{ steps.pyguard-scan.outputs.issues-found }}"
        echo "SARIF file: ${{ steps.pyguard-scan.outputs.sarif-file }}"
        
        # Verify outputs are not empty
        if [ -z "${{ steps.pyguard-scan.outputs.issues-found }}" ]; then
          echo "::error::issues-found output is empty"
          exit 1
        fi
        
        if [ -z "${{ steps.pyguard-scan.outputs.sarif-file }}" ]; then
          echo "::error::sarif-file output is empty"
          exit 1
        fi
        
        echo "✅ All outputs are valid"

  test-action-python-versions:
    name: Test Python Version Matrix
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11', '3.12', '3.13']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Test with Python ${{ matrix.python-version }}
      uses: ./
      with:
        paths: 'pyguard/'
        python-version: ${{ matrix.python-version }}
        scan-only: 'true'
        upload-sarif: 'false'
    
    - name: Verify Python version
      run: python --version

  # Test that the action works with a vulnerable test file
  test-action-detects-issues:
    name: Test Issue Detection
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Create test file with vulnerabilities
      run: |
        mkdir -p test-scan
        cat > test-scan/vulnerable.py << 'EOF'
        import os
        
        # SQL Injection vulnerability
        def get_user(user_id):
            query = "SELECT * FROM users WHERE id = " + user_id
            return query
        
        # Hardcoded secret
        API_KEY = "sk_live_51234567890"
        
        # Command injection
        def run_command(cmd):
            os.system(cmd)
        EOF
    
    - name: Scan vulnerable file
      id: scan-vulnerable
      uses: ./
      with:
        paths: 'test-scan/'
        scan-only: 'true'
        upload-sarif: 'false'
      continue-on-error: true
    
    - name: Verify issues were detected
      run: |
        ISSUES="${{ steps.scan-vulnerable.outputs.issues-found }}"
        echo "Detected $ISSUES issues"
        
        if [ "$ISSUES" -lt "1" ]; then
          echo "::error::Expected at least 1 issue to be detected, found $ISSUES"
          exit 1
        fi
        
        echo "✅ Successfully detected vulnerabilities"

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs:
      - test-action-basic
      - test-action-security-only
      - test-action-custom-paths
      - test-action-exclusions
      - test-action-sarif-upload
      - test-action-fail-on-issues
      - test-action-outputs
      - test-action-python-versions
      - test-action-detects-issues
    
    steps:
    - name: Summary
      run: |
        echo "## ✅ All Action Tests Passed" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "The PyGuard GitHub Action is working correctly and ready for:" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Basic scanning" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Security-only mode" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Multiple paths and exclusions" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ SARIF upload" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Fail on issues" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Output validation" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Python version compatibility" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Vulnerability detection" >> $GITHUB_STEP_SUMMARY
