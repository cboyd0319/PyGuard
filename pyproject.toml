[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "pyguard"
version = "0.6.0"
description = "The World's Best Python Security & Compliance Tool - ML-powered detection, MCP integration, 6+ compliance frameworks"
readme = {file = "README.md", content-type = "text/markdown"}
requires-python = ">=3.11"
license = {text = "MIT"}
authors = [
    {name = "Chad Boyd"}
]
keywords = ["security", "code-quality", "static-analysis", "linting", "github-actions", "sarif", "python", "vulnerability-scanner", "autofix"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12", 
    "Programming Language :: Python :: 3.13",
    "Topic :: Security",
    "Topic :: Security :: Cryptography",
    "Topic :: Software Development :: Quality Assurance",
    "Topic :: Software Development :: Testing",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Monitoring",
    "Environment :: Console",
    "Typing :: Typed",
]

dependencies = [
    "pylint>=4.0.1",
    "flake8>=7.3.0",
    "black>=25.9.0",
    "isort>=7.0.0",
    "mypy>=1.18.2",
    "bandit>=1.8.6",
    "autopep8>=2.3.2",
    "pydocstyle>=6.3.0",
    "safety>=3.6.2",
    "radon>=6.0.1",
    "vulture>=2.14",
    "ruff>=0.14.0",
    "rich>=14.2.0",
    "watchdog>=6.0.0",
    "nbformat>=5.0.0",
    "nbclient>=0.5.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.4.2",
    "pytest-cov>=7.0.0",
    "pytest-mock>=3.15.1",
    "pytest-randomly>=3.15.0",
    "pytest-benchmark>=4.0.0",
    "pytest-xdist>=3.6.0",
    "freezegun>=1.5.0",
    "hypothesis>=6.100.0",
    "tox>=4.31.0",
]
fast = [
    # RipGrep integration for high-performance scanning
    # Note: This installs a Python wrapper. You still need ripgrep binary installed.
    # Install ripgrep: brew install ripgrep (macOS), apt install ripgrep (Linux)
]

[project.urls]
Homepage = "https://github.com/cboyd0319/PyGuard"
Documentation = "https://github.com/cboyd0319/PyGuard/tree/main/docs"
Repository = "https://github.com/cboyd0319/PyGuard"
"Bug Tracker" = "https://github.com/cboyd0319/PyGuard/issues"
"Security Policy" = "https://github.com/cboyd0319/PyGuard/security/policy"
"Changelog" = "https://github.com/cboyd0319/PyGuard/blob/main/docs/CHANGELOG.md"
"GitHub Action" = "https://github.com/marketplace/actions/pyguard-security-scanner"

[project.scripts]
pyguard = "pyguard.cli:main"
pyguard-hooks = "pyguard.git_hooks_cli:main"

[tool.black]
line-length = 100
target-version = ['py311', 'py312', 'py313']
include = '\.pyi?$'
extend-exclude = '''
/(
    \.git
  | \.venv
  | \.tox
  | build
  | dist
  | __pycache__
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.ruff]
line-length = 100
target-version = "py311"
src = ["pyguard", "tests"]

[tool.ruff.lint]
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # pyflakes
    "I",      # isort
    "N",      # pep8-naming
    "UP",     # pyupgrade
    "B",      # flake8-bugbear
    "S",      # flake8-bandit (security)
    "C4",     # flake8-comprehensions
    "DTZ",    # flake8-datetimez
    "T20",    # flake8-print
    "PT",     # flake8-pytest-style
    "RET",    # flake8-return
    "SIM",    # flake8-simplify
    "ARG",    # flake8-unused-arguments
    "PL",     # pylint
    "RUF",    # Ruff-specific rules
]
ignore = [
    "E501",   # Line too long (handled by formatter)
    "S101",   # Use of assert (OK in tests and validation code)
    "S603",   # subprocess call (intentional for tool integration)
    "S607",   # Starting process with partial path (intentional)
    "S104",   # Binding to all interfaces (intentional in examples)
    "S108",   # Hardcoded temp directory (standard practice)
    "S110",   # Try-except-pass (intentional in some error handling)
    "S112",   # Try-except-continue (intentional in some loops)
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = ["S101", "PLR2004", "ARG", "S105"]
"pyguard/lib/**/*.py" = ["T20"]  # Print statements OK in security detection modules

[tool.ruff.lint.isort]
known-first-party = ["pyguard"]
force-sort-within-sections = true

[tool.mypy]
python_version = "3.13"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_calls = false
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_optional = true
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "-q", 
    "--strict-config",
    "--strict-markers",
    "--disable-warnings",
    "--randomly-seed=1337",
    "--cov=pyguard",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-branch",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
xfail_strict = true
filterwarnings = [
    "error::DeprecationWarning",
    "error::PendingDeprecationWarning",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "security: marks security-related tests",
    "best_practices: marks best practices tests",
    "formatting: marks formatting tests",
]

[tool.coverage.run]
branch = true
source = ["pyguard"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/examples/*",
    "*/benchmarks/*",
    "*/__pycache__/*",
]
parallel = true

[tool.coverage.report]
fail_under = 87
skip_covered = true
show_missing = true
precision = 2
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "def __str__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstractmethod",
    "@abc.abstractmethod",
    "pass",
]

[tool.pylint.messages_control]
max-line-length = 100
disable = [
    "C0111",  # missing-docstring
    "C0103",  # invalid-name
]

[tool.bandit]
exclude_dirs = ["tests", "benchmarks"]
skips = ["B101", "B601"]
